### Python Functions: A Comprehensive Tutorial

Functions in Python are reusable blocks of code designed to perform a specific task. They help reduce code duplication and improve modularity. This tutorial will cover everything you need to know about functions, from the basics to advanced concepts.

---

### 1. What is a Function?

A function is a block of organized, reusable code that is used to perform a single, related action. Functions allow us to break programs into smaller, more manageable pieces.

### 2. Defining a Function

In Python, functions are defined using the `def` keyword. Here's a simple example of defining a function:

```python
def greet():
    print("Hello, world!")
```

### 3. Calling a Function

Once a function is defined, you can call it by its name followed by parentheses:

```python
greet()
```

### 4. Function Parameters

Functions can take parameters (also known as arguments), which are inputs passed to the function.

```python
def greet(name):
    print(f"Hello, {name}!")

greet("Karen")
```

You can also pass multiple parameters:

```python
def add(a, b):
    return a + b

result = add(3, 5)
```

### 5. Return Statement

Functions can return values using the `return` statement:

```python
def square(x):
    return x * x

result = square(4)
```

If a function does not explicitly return a value, it will return `None`.

### 6. Default Parameters

You can assign default values to function parameters. If no argument is passed, the default value is used:

```python
def greet(name="Guest"):
    print(f"Hello, {name}!")

greet()
greet("Karen")
```

### 7. Keyword Arguments

Python allows you to call functions using keyword arguments. This makes the function calls more readable and allows arguments to be passed in any order:

```python
def describe_pet(pet_name, animal_type="dog"):
    print(f"I have a {animal_type} named {pet_name}.")

describe_pet(pet_name="Buddy")
describe_pet(animal_type="cat", pet_name="Whiskers")
```

### 8. Variable-Length Arguments (`*args`, `**kwargs`)

#### a. `*args` (Non-Keyworded Variable-Length Arguments)

If you donâ€™t know how many arguments you will receive, use `*args`. It allows you to pass a variable number of non-keyword arguments to the function:

```python
def add(*numbers):
    return sum(numbers)

result = add(1, 2, 3, 4)
```

#### b. `**kwargs` (Keyworded Variable-Length Arguments)

If you want to pass a variable number of keyword arguments, use `**kwargs`:

```python
def print_details(**info):
    for key, value in info.items():
        print(f"{key}: {value}")

print_details(name="Karen", age=25, city="New York")
```

### 9. Anonymous Functions (Lambda Functions)

Lambda functions are small, unnamed functions defined with the `lambda` keyword. They are typically used for short, simple operations.

```python
square = lambda x: x * x

result = square(5)
```

They are often used in combination with functions like `map()`, `filter()`, and `sorted()`:

```python
numbers = [1, 2, 3, 4]
squared = map(lambda x: x * x, numbers)
print(list(squared))
```

### 10. Nested Functions

Functions can be defined inside other functions. These are called nested functions:

```python
def outer_function():
    def inner_function():
        print("This is the inner function.")
    inner_function()

outer_function()
```

### 11. Scope and Lifetime of Variables

Variables inside a function are **local** to that function. They cannot be accessed outside of it.

```python
def foo():
    x = 10
    print(x)

foo()
```

#### Global Variables

If you want to modify a global variable inside a function, you must use the `global` keyword:

```python
x = 10

def foo():
    global x
    x = 20

foo()
print(x)
```

### 12. Higher-Order Functions

A **higher-order function** is a function that takes one or more functions as arguments or returns a function as a result. For example, `map()`, `filter()`, and `reduce()` are higher-order functions.

```python
def apply_function(func, x):
    return func(x)

result = apply_function(lambda x: x * 2, 10)
```

### 13. Recursive Functions

A recursive function is a function that calls itself to solve smaller instances of the same problem.

```python
def factorial(n):
    if n == 1:
        return 1
    else:
        return n * factorial(n - 1)

result = factorial(5)
```

### 14. Function Annotations

Python allows you to add type hints or annotations to function arguments and return values. These annotations are purely for documentation and don't enforce any type-checking.

```python
def add(a: int, b: int) -> int:
    return a + b

result = add(5, 7)
```

### 15. Best Practices for Using Functions

- **Use meaningful names:** Your function name should clearly describe what the function does.
- **Keep it simple:** Functions should ideally perform one task.
- **Use comments and docstrings:** Provide documentation using comments or `docstrings` for clarity.

```python
def add(a: int, b: int) -> int:
    """
    Adds two numbers and returns the result.
    Args:
    a (int): The first number.
    b (int): The second number.
    
    Returns:
    int: The sum of a and b.
    """
    return a + b
```

- **Avoid side effects:** Functions should avoid modifying global variables or input parameters unless necessary.